/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç 20 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ 
 * –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–µ—Ä–∞.
 * 
 * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: node integration-tests.js
 */

const axios = require('axios');
const assert = require('assert');
const fs = require('fs');
const path = require('path');
const FormData = require('form-data');

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const BASE_URL = 'http://localhost:5000';

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
let adminToken = '';
let doctorToken = '';
let patientToken = '';
let testDoctorId = '';
let testPatientId = '';
let testServiceId = '';
let testAppointmentId = '';

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–æ–º
function log(message, color = colors.reset) {
  console.log(color + message + colors.reset);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
function formatTestResult(testName, passed, error = null) {
  if (passed) {
    log(`‚úÖ ${testName}: –£—Å–ø–µ—à–Ω–æ`, colors.green);
  } else {
    log(`‚ùå ${testName}: –û—à–∏–±–∫–∞`, colors.red);
    if (error) log(`   ${error.message || error}`, colors.red);
  }
}

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
async function runTest(testName, testFunction) {
  try {
    await testFunction();
    formatTestResult(testName, true);
    return true;
  } catch (error) {
    formatTestResult(testName, false, error);
    return false;
  }
}

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –∏ –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
const tests = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
async function runAllTests() {
  log('\n' + colors.bright + colors.cyan + '='.repeat(60), colors.cyan);
  log('–ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –°–ï–†–í–ï–†–ê –°–¢–û–ú–ê–¢–û–õ–û–ì–ò–ß–ï–°–ö–û–ô –ö–õ–ò–ù–ò–ö–ò', colors.cyan);
  log('='.repeat(60) + '\n', colors.cyan);

  let passedCount = 0;
  let failedCount = 0;

  for (const test of tests) {
    const result = await runTest(test.name, test.fn);
    if (result) {
      passedCount++;
    } else {
      failedCount++;
    }
  }

  // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  log('\n' + '='.repeat(60), colors.cyan);
  log(`–ò–¢–û–ì–û: ${passedCount} –∏–∑ ${tests.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`, 
      passedCount === tests.length ? colors.green : colors.yellow);
  
  if (passedCount === tests.length) {
    log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! üéâ\n', colors.green + colors.bright);
  } else {
    log(`\n‚ö†Ô∏è ${failedCount} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞.\n`, colors.yellow + colors.bright);
  }
}

// ----- –¢–ï–°–¢–´ -----

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
tests.push({
  name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞',
  fn: async () => {
    const response = await axios.get(`${BASE_URL}/api/health`);
    assert.strictEqual(response.status, 200);
    assert.strictEqual(response.data.status, 'ok');
  }
});

// –¢–µ—Å—Ç 2: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
tests.push({
  name: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
  fn: async () => {
    const response = await axios.post(`${BASE_URL}/api/login`, {
      email: 'admin@dental.com',
      password: 'admin123'
    });
    
    assert.strictEqual(response.status, 200);
    assert.ok(response.data.token);
    adminToken = response.data.token;
  }
});

// –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞
tests.push({
  name: '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞',
  fn: async () => {
    const response = await axios.post(
      `${BASE_URL}/api/admin/doctors`,
      {
        firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
        lastName: '–í—Ä–∞—á',
        specialization: '–¢–µ—Ä–∞–ø–µ–≤—Ç',
        phone: '+7(900)123-45-67',
        email: 'test.doctor@dental.com',
        password: 'doctor123',
        description: '–¢–µ—Å—Ç–æ–≤—ã–π –≤—Ä–∞—á –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤'
      },
      { headers: { Authorization: `Bearer ${adminToken}` } }
    );
    
    assert.strictEqual(response.status, 201);
    assert.ok(response.data.id);
    testDoctorId = response.data.id;
  }
});

// –¢–µ—Å—Ç 4: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞
tests.push({
  name: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞',
  fn: async () => {
    const response = await axios.post(`${BASE_URL}/api/login`, {
      email: 'test.doctor@dental.com',
      password: 'doctor123'
    });
    
    assert.strictEqual(response.status, 200);
    assert.ok(response.data.token);
    doctorToken = response.data.token;
  }
});

// –¢–µ—Å—Ç 5: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
tests.push({
  name: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞',
  fn: async () => {
    const response = await axios.post(`${BASE_URL}/api/register`, {
      firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
      lastName: '–ü–∞—Ü–∏–µ–Ω—Ç',
      email: 'test.patient@example.com',
      password: 'patient123',
      phone: '+7(900)765-43-21',
      birthDate: '1990-01-01'
    });
    
    assert.strictEqual(response.status, 201);
    assert.ok(response.data.id);
    testPatientId = response.data.id;
  }
});

// –¢–µ—Å—Ç 6: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
tests.push({
  name: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞',
  fn: async () => {
    const response = await axios.post(`${BASE_URL}/api/login`, {
      email: 'test.patient@example.com',
      password: 'patient123'
    });
    
    assert.strictEqual(response.status, 200);
    assert.ok(response.data.token);
    patientToken = response.data.token;
  }
});

// –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π
tests.push({
  name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π',
  fn: async () => {
    const response = await axios.get(`${BASE_URL}/api/doctors`);
    
    assert.strictEqual(response.status, 200);
    assert.ok(Array.isArray(response.data));
    assert.ok(response.data.length > 0);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –≤—Ä–∞—á –≤ —Å–ø–∏—Å–∫–µ
    const testDoctor = response.data.find(doctor => doctor.id === testDoctorId);
    assert.ok(testDoctor);
  }
});

// –¢–µ—Å—Ç 8: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≤—Ä–∞—á–µ
tests.push({
  name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≤—Ä–∞—á–µ',
  fn: async () => {
    const response = await axios.get(`${BASE_URL}/api/doctors/${testDoctorId}`);
    
    assert.strictEqual(response.status, 200);
    assert.strictEqual(response.data.id, testDoctorId);
    assert.strictEqual(response.data.firstName, '–¢–µ—Å—Ç–æ–≤—ã–π');
    assert.strictEqual(response.data.lastName, '–í—Ä–∞—á');
  }
});

// –¢–µ—Å—Ç 9: –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
tests.push({
  name: '–°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥–∏',
  fn: async () => {
    const response = await axios.post(
      `${BASE_URL}/api/admin/services`,
      {
        name: '–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —É—Å–ª—É–≥–∏',
        price: 1000,
        duration: 30
      },
      { headers: { Authorization: `Bearer ${adminToken}` } }
    );
    
    assert.strictEqual(response.status, 201);
    assert.ok(response.data.id);
    testServiceId = response.data.id;
  }
});

// –¢–µ—Å—Ç 10: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥
tests.push({
  name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥',
  fn: async () => {
    const response = await axios.get(`${BASE_URL}/api/services`);
    
    assert.strictEqual(response.status, 200);
    assert.ok(Array.isArray(response.data));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞ –≤ —Å–ø–∏—Å–∫–µ
    const testService = response.data.find(service => service.id === testServiceId);
    assert.ok(testService);
    assert.strictEqual(testService.name, '–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞');
  }
});

// –¢–µ—Å—Ç 11: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
tests.push({
  name: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º',
  fn: async () => {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(10, 0, 0, 0);
    
    const response = await axios.post(
      `${BASE_URL}/api/appointments`,
      {
        doctorId: testDoctorId,
        serviceId: testServiceId,
        appointmentDate: tomorrow.toISOString().split('T')[0],
        appointmentTime: '10:00',
        comment: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º'
      },
      { headers: { Authorization: `Bearer ${patientToken}` } }
    );
    
    assert.strictEqual(response.status, 201);
    assert.ok(response.data.id);
    testAppointmentId = response.data.id;
  }
});

// –¢–µ—Å—Ç 12: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏–µ–º –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
tests.push({
  name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏–µ–º –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞',
  fn: async () => {
    const response = await axios.get(
      `${BASE_URL}/api/patient/appointments`,
      { headers: { Authorization: `Bearer ${patientToken}` } }
    );
    
    assert.strictEqual(response.status, 200);
    assert.ok(Array.isArray(response.data));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ —Å–ø–∏—Å–∫–µ
    const testAppointment = response.data.find(appointment => appointment.id === testAppointmentId);
    assert.ok(testAppointment);
  }
});

// –¢–µ—Å—Ç 13: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏–µ–º –¥–ª—è –≤—Ä–∞—á–∞
tests.push({
  name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏–µ–º –¥–ª—è –≤—Ä–∞—á–∞',
  fn: async () => {
    const response = await axios.get(
      `${BASE_URL}/api/doctor/appointments`,
      { headers: { Authorization: `Bearer ${doctorToken}` } }
    );
    
    assert.strictEqual(response.status, 200);
    assert.ok(Array.isArray(response.data));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ —Å–ø–∏—Å–∫–µ
    const testAppointment = response.data.find(appointment => appointment.id === testAppointmentId);
    assert.ok(testAppointment);
  }
});

// –¢–µ—Å—Ç 14: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
tests.push({
  name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏',
  fn: async () => {
    const response = await axios.put(
      `${BASE_URL}/api/admin/services/${testServiceId}`,
      {
        name: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞',
        description: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —É—Å–ª—É–≥–∏',
        price: 1500,
        duration: 45
      },
      { headers: { Authorization: `Bearer ${adminToken}` } }
    );
    
    assert.strictEqual(response.status, 200);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å–ª—É–≥–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å
    const getResponse = await axios.get(`${BASE_URL}/api/services/${testServiceId}`);
    assert.strictEqual(getResponse.data.name, '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞');
    assert.strictEqual(getResponse.data.price, 1500);
  }
});

// –¢–µ—Å—Ç 15: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤—Ä–∞—á–∞
tests.push({
  name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤—Ä–∞—á–∞',
  fn: async () => {
    const response = await axios.put(
      `${BASE_URL}/api/admin/doctors/${testDoctorId}`,
      {
        fullName: '–¢–µ—Å—Ç–æ–≤—ã–π –í—Ä–∞—á',
        specialization: '–•–∏—Ä—É—Ä–≥',
        experience: 5,
        description: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞'
      },
      { headers: { Authorization: `Bearer ${adminToken}` } }
    );
    
    assert.strictEqual(response.status, 200);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –≤—Ä–∞—á–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª—Å—è
    const getResponse = await axios.get(`${BASE_URL}/api/doctors/${testDoctorId}`);
    assert.strictEqual(getResponse.data.specialization, '–•–∏—Ä—É—Ä–≥');
  }
});

// –¢–µ—Å—Ç 16: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
tests.push({
  name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º',
  fn: async () => {
    const response = await axios.put(
      `${BASE_URL}/api/doctor/appointments/${testAppointmentId}`,
      {
        status: 'confirmed'
      },
      { headers: { Authorization: `Bearer ${doctorToken}` } }
    );
    
    assert.strictEqual(response.status, 200);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª—Å—è
    const getResponse = await axios.get(
      `${BASE_URL}/api/patient/appointments`,
      { headers: { Authorization: `Bearer ${patientToken}` } }
    );
    
    const testAppointment = getResponse.data.find(appointment => appointment.id === testAppointmentId);
    assert.strictEqual(testAppointment.status, 'confirmed');
  }
});

// –¢–µ—Å—Ç 17: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –≤—Ä–∞—á–∞
tests.push({
  name: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –≤—Ä–∞—á–∞',
  fn: async () => {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const testImagePath = path.join(__dirname, 'test-doctor-image.jpg');
    if (!fs.existsSync(testImagePath)) {
      // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞
      fs.writeFileSync(testImagePath, Buffer.from('fake image content'));
    }
    
    const formData = new FormData();
    formData.append('photo', fs.createReadStream(testImagePath));
    
    const response = await axios.post(
      `${BASE_URL}/api/admin/doctors/${testDoctorId}/photo`,
      formData,
      {
        headers: {
          ...formData.getHeaders(),
          Authorization: `Bearer ${adminToken}`
        }
      }
    );
    
    assert.strictEqual(response.status, 200);
    assert.ok(response.data.photoUrl);
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    if (fs.existsSync(testImagePath)) {
      fs.unlinkSync(testImagePath);
    }
  }
});

// –¢–µ—Å—Ç 18: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
tests.push({
  name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞',
  fn: async () => {
    const response = await axios.get(
      `${BASE_URL}/api/profile`,
      { headers: { Authorization: `Bearer ${patientToken}` } }
    );
    
    assert.strictEqual(response.status, 200);
    assert.strictEqual(response.data.full_name, '–¢–µ—Å—Ç–æ–≤—ã–π –ü–∞—Ü–∏–µ–Ω—Ç');
    assert.strictEqual(response.data.email, 'test.patient@example.com');
  }
});

// –¢–µ—Å—Ç 19: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –¥–ª—è –∞–¥–º–∏–Ω–∞
tests.push({
  name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –¥–ª—è –∞–¥–º–∏–Ω–∞',
  fn: async () => {
    const response = await axios.get(
      `${BASE_URL}/api/admin/services`,
      { headers: { Authorization: `Bearer ${adminToken}` } }
    );
    
    assert.strictEqual(response.status, 200);
    assert.ok(Array.isArray(response.data));
  }
});

// –¢–µ—Å—Ç 20: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
tests.push({
  name: '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
  fn: async () => {
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º
    let response = await axios.delete(
      `${BASE_URL}/api/admin/appointments/${testAppointmentId}`,
      { headers: { Authorization: `Bearer ${adminToken}` } }
    );
    assert.strictEqual(response.status, 200);
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —É—Å–ª—É–≥—É
    response = await axios.delete(
      `${BASE_URL}/api/admin/services/${testServiceId}`,
      { headers: { Authorization: `Bearer ${adminToken}` } }
    );
    assert.strictEqual(response.status, 200);
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞
    response = await axios.delete(
      `${BASE_URL}/api/admin/doctors/${testDoctorId}`,
      { headers: { Authorization: `Bearer ${adminToken}` } }
    );
    assert.strictEqual(response.status, 200);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–∞—á —É–¥–∞–ª–µ–Ω
    try {
      await axios.get(`${BASE_URL}/api/doctors/${testDoctorId}`);
      assert.fail('–í—Ä–∞—á –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω');
    } catch (error) {
      assert.strictEqual(error.response.status, 404);
    }
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
runAllTests().catch(error => {
  log('\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', colors.red);
  log(error.message, colors.red);
  
  if (error.response) {
    log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', colors.yellow);
    log(JSON.stringify(error.response.data, null, 2), colors.yellow);
  }
}); 