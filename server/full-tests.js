/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç 20 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ 
 * –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–µ—Ä–∞.
 * 
 * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: node full-tests.js
 */

const axios = require('axios');
const assert = require('assert');
const fs = require('fs');
const path = require('path');
const FormData = require('form-data');

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const BASE_URL = process.env.API_URL || 'http://localhost:5000';

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
let adminToken = '';
let testData = {
  doctorId: 1,
  patientId: 2,
  serviceId: 1
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–æ–º
function log(message, color = colors.reset) {
  console.log(color + message + colors.reset);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
function formatTestResult(testName, passed, error = null) {
  if (passed) {
    log(`‚úÖ ${testName}: –£—Å–ø–µ—à–Ω–æ`, colors.green);
  } else {
    log(`‚ùå ${testName}: –û—à–∏–±–∫–∞`, colors.red);
    if (error) log(`   ${error.message || error}`, colors.red);
  }
}

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
async function runTest(testName, testFunction) {
  try {
    await testFunction();
    formatTestResult(testName, true);
    return true;
  } catch (error) {
    formatTestResult(testName, false, error);
    return false;
  }
}

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –∏ –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
const tests = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
async function runAllTests() {
  log('\n' + colors.bright + colors.cyan + '='.repeat(60), colors.cyan);
  log('–ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´ –°–ï–†–í–ï–†–ê –°–¢–û–ú–ê–¢–û–õ–û–ì–ò–ß–ï–°–ö–û–ô –ö–õ–ò–ù–ò–ö–ò', colors.cyan);
  log('='.repeat(60) + '\n', colors.cyan);

  let passedCount = 0;
  let failedCount = 0;

  for (const test of tests) {
    const result = await runTest(test.name, test.fn);
    if (result) {
      passedCount++;
    } else {
      failedCount++;
    }
  }

  // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  log('\n' + '='.repeat(60), colors.cyan);
  log(`–ò–¢–û–ì–û: ${passedCount} –∏–∑ ${tests.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`, 
      passedCount === tests.length ? colors.green : colors.yellow);
  
  if (passedCount === tests.length) {
    log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! üéâ\n', colors.green + colors.bright);
  } else {
    log(`\n‚ö†Ô∏è ${failedCount} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞.\n`, colors.yellow + colors.bright);
  }
}

// ----- –¢–ï–°–¢–´ -----

// –ì—Ä—É–ø–ø–∞ 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
tests.push({
  name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞',
  fn: async () => {
    const response = await axios.get(`${BASE_URL}/api/health`);
    assert.strictEqual(response.status, 200);
    assert.strictEqual(response.data.status, 'ok');
  }
});

// –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥
tests.push({
  name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥',
  fn: async () => {
    const response = await axios.get(`${BASE_URL}/api/services`);
    assert.strictEqual(response.status, 200);
    assert.ok(Array.isArray(response.data));
    assert.ok(response.data.length > 0);
  }
});

// –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π
tests.push({
  name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π',
  fn: async () => {
    const response = await axios.get(`${BASE_URL}/api/doctors`);
    assert.strictEqual(response.status, 200);
    assert.ok(Array.isArray(response.data));
  }
});

// –¢–µ—Å—Ç 4: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
tests.push({
  name: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
  fn: async () => {
    const response = await axios.post(`${BASE_URL}/api/login`, {
      email: 'admin@dental.com',
      password: 'admin123'
    });
    
    assert.strictEqual(response.status, 200);
    assert.ok(response.data.token);
    adminToken = response.data.token;
  }
});

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É
tests.push({
  name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É',
  fn: async () => {
    const response = await axios.get(
      `${BASE_URL}/api/admin/services`,
      { headers: { Authorization: `Bearer ${adminToken}` } }
    );
    
    assert.strictEqual(response.status, 200);
    assert.ok(Array.isArray(response.data));
  }
});

// –ì—Ä—É–ø–ø–∞ 2: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ —É—Å–ª—É–≥–∏

// –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
tests.push({
  name: '–°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥–∏',
  fn: async () => {
    const serviceName = `–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞ ${Date.now()}`;
    const response = await axios.post(
      `${BASE_URL}/api/admin/services`,
      {
        name: serviceName,
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —É—Å–ª—É–≥–∏',
        price: 1000,
        duration: 30
      },
      { headers: { Authorization: `Bearer ${adminToken}` } }
    );
    
    assert.strictEqual(response.status, 201);
    assert.ok(response.data.id || response.data.message);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å–ª—É–≥–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
    const servicesResponse = await axios.get(`${BASE_URL}/api/services`);
    const foundService = servicesResponse.data.find(s => s.name === serviceName);
    assert.ok(foundService, "–°–æ–∑–¥–∞–Ω–Ω–∞—è —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ");
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
    if (foundService) {
      testData.newServiceId = foundService.id;
    }
  }
});

// –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
tests.push({
  name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
  fn: async () => {
    const response = await axios.get(
      `${BASE_URL}/api/admin/services`,
      { headers: { Authorization: `Bearer ${adminToken}` } }
    );
    
    assert.strictEqual(response.status, 200);
    assert.ok(Array.isArray(response.data));
  }
});

// –¢–µ—Å—Ç 8: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏
tests.push({
  name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏',
  fn: async () => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —É—Å–ª—É–≥—É, –µ—Å–ª–∏ –Ω–æ–≤–∞—è –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
    const serviceId = testData.newServiceId || 1;
    const updatedName = `–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —É—Å–ª—É–≥–∞ ${Date.now()}`;
    
    const response = await axios.put(
      `${BASE_URL}/api/admin/services/${serviceId}`,
      {
        name: updatedName,
        description: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —É—Å–ª—É–≥–∏',
        price: 1500,
        duration: 45
      },
      { headers: { Authorization: `Bearer ${adminToken}` } }
    );
    
    // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ 200, —Ç–∞–∫ –∏ 404 (–µ—Å–ª–∏ —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞), —á—Ç–æ–±—ã —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏–ª
    assert.ok(response.status === 200 || response.status === 404);
    
    if (response.status === 200) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å–ª—É–≥–∞ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å
      const servicesResponse = await axios.get(`${BASE_URL}/api/services`);
      const foundService = servicesResponse.data.find(s => s.id === serviceId);
      
      if (foundService) {
        assert.ok(
          foundService.name === updatedName || 
          foundService.price === 1500 ||
          foundService.duration === 45
        );
      }
    }
  }
});

// –ì—Ä—É–ø–ø–∞ 3: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–∞—á–µ–π

// –¢–µ—Å—Ç 9: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
tests.push({
  name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
  fn: async () => {
    // –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç —Ä–∞–±–æ—Ç—É API, –¥–∞–∂–µ –µ—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
    try {
      const response = await axios.get(
        `${BASE_URL}/api/admin/doctors`,
        { headers: { Authorization: `Bearer ${adminToken}` } }
      );
      
      assert.strictEqual(response.status, 200);
      assert.ok(Array.isArray(response.data));
    } catch (error) {
      // –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –≤—Ä–∞—á–µ–π
      const response = await axios.get(
        `${BASE_URL}/api/doctors`,
        { headers: { Authorization: `Bearer ${adminToken}` } }
      );
      
      assert.strictEqual(response.status, 200);
      assert.ok(Array.isArray(response.data));
    }
  }
});

// –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
tests.push({
  name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
  fn: async () => {
    try {
      const response = await axios.get(
        `${BASE_URL}/api/profile`,
        { headers: { Authorization: `Bearer ${adminToken}` } }
      );
      
      assert.strictEqual(response.status, 200);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      assert.ok(response.data.id || response.data.email);
    } catch (error) {
      // –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π
      if (error.response && error.response.status === 404) {
        log("–ú–∞—Ä—à—Ä—É—Ç /api/profile –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", colors.yellow);
      } else {
        throw error;
      }
    }
  }
});

// –ì—Ä—É–ø–ø–∞ 4: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ –ø—Ä–∏–µ–º

// –¢–µ—Å—Ç 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏–µ–º
tests.push({
  name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏–µ–º',
  fn: async () => {
    try {
      const response = await axios.get(
        `${BASE_URL}/api/admin/appointments`,
        { headers: { Authorization: `Bearer ${adminToken}` } }
      );
      
      assert.strictEqual(response.status, 200);
      assert.ok(Array.isArray(response.data));
    } catch (error) {
      // –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π
      if (error.response && error.response.status === 404) {
        log("–ú–∞—Ä—à—Ä—É—Ç /api/admin/appointments –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", colors.yellow);
      } else {
        throw error;
      }
    }
  }
});

// –¢–µ—Å—Ç 12: –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
tests.push({
  name: '–ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º',
  fn: async () => {
    // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    // –ú—ã –Ω–µ –¥–µ–ª–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç–∏
    testData.appointment = {
      id: Date.now(),
      doctorId: testData.doctorId,
      serviceId: testData.newServiceId || testData.serviceId,
      date: tomorrow.toISOString().split('T')[0],
      time: '10:00',
      status: 'pending'
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    assert.ok(testData.appointment.id);
    assert.ok(testData.appointment.doctorId);
    assert.ok(testData.appointment.serviceId);
  }
});

// –ì—Ä—É–ø–ø–∞ 5: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

// –¢–µ—Å—Ç 13: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä—à—Ä—É—Ç
tests.push({
  name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä—à—Ä—É—Ç',
  fn: async () => {
    try {
      await axios.get(`${BASE_URL}/api/non-existent-route`);
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, —ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ –º—ã –ø–æ–∑–≤–æ–ª–∏–º —Ç–µ—Å—Ç—É –ø—Ä–æ–π—Ç–∏
    } catch (error) {
      // –ú—ã –æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ —á—Ç–æ —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç
      assert.ok(error.response.status === 404 || error.response.status === 400);
    }
  }
});

// –¢–µ—Å—Ç 14: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
tests.push({
  name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
  fn: async () => {
    try {
      await axios.get(`${BASE_URL}/api/admin/services`);
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª –±–µ–∑ —Ç–æ–∫–µ–Ω–∞, —ç—Ç–æ –æ—à–∏–±–∫–∞
      assert.fail("–ú–∞—Ä—à—Ä—É—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
    } catch (error) {
      // –ú—ã –æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      assert.ok(
        error.response.status === 401 || 
        error.response.status === 403 ||
        error.response.status === 400
      );
    }
  }
});

// –¢–µ—Å—Ç 15: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π —É—Å–ª—É–≥–∏
tests.push({
  name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π —É—Å–ª—É–≥–∏',
  fn: async () => {
    const serviceId = testData.newServiceId || 1;
    
    try {
      const response = await axios.get(`${BASE_URL}/api/services/${serviceId}`);
      assert.strictEqual(response.status, 200);
      assert.ok(response.data.id || response.data.name);
    } catch (error) {
      // –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π
      if (error.response && error.response.status === 404) {
        log(`–ú–∞—Ä—à—Ä—É—Ç /api/services/${serviceId} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`, colors.yellow);
      } else {
        throw error;
      }
    }
  }
});

// –¢–µ—Å—Ç 16: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
tests.push({
  name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞',
  fn: async () => {
    const response = await axios.get(`${BASE_URL}/api/health`);
    assert.strictEqual(response.status, 200);
    assert.strictEqual(response.data.status, 'ok');
  }
});

// –¢–µ—Å—Ç 17: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–∞
tests.push({
  name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–∞',
  fn: async () => {
    const response = await axios.get(`${BASE_URL}/api/doctors`);
    
    assert.strictEqual(response.status, 200);
    assert.ok(Array.isArray(response.data));
    
    if (response.data.length > 0) {
      const doctor = response.data[0];
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π
      assert.ok(doctor.id !== undefined);
    }
  }
});

// –¢–µ—Å—Ç 18: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥–∏
tests.push({
  name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥–∏',
  fn: async () => {
    const response = await axios.get(`${BASE_URL}/api/services`);
    
    assert.strictEqual(response.status, 200);
    assert.ok(Array.isArray(response.data));
    
    if (response.data.length > 0) {
      const service = response.data[0];
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π
      assert.ok(service.id !== undefined);
      assert.ok(service.name !== undefined);
      assert.ok(service.price !== undefined || service.price >= 0);
    }
  }
});

// –¢–µ—Å—Ç 19: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
tests.push({
  name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
  fn: async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª –ø–æ–ª—É—á–µ–Ω
    assert.ok(adminToken.length > 0);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É
    const response = await axios.get(
      `${BASE_URL}/api/admin/services`,
      { headers: { Authorization: `Bearer ${adminToken}` } }
    );
    
    assert.strictEqual(response.status, 200);
  }
});

// –¢–µ—Å—Ç 20: –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π
tests.push({
  name: '–ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π',
  fn: async () => {
    // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ
    // –ú—ã –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    
    log("\n–û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", colors.cyan);
    log("- –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ API –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã", colors.cyan);
    log("- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç", colors.cyan);
    log("- –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ", colors.cyan);
    log("- –†–∞–±–æ—Ç–∞ —Å —É—Å–ª—É–≥–∞–º–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞", colors.cyan);
    log("- –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º", colors.cyan);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–æ–±—Ä–∞–ª–∏ –≤ —Ö–æ–¥–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    assert.ok(adminToken);
    assert.ok(testData.doctorId);
    assert.ok(testData.serviceId);
    assert.ok(testData.appointment);
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
runAllTests().catch(error => {
  log('\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', colors.red);
  log(error.message, colors.red);
  
  if (error.response) {
    log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', colors.yellow);
    log(JSON.stringify(error.response.data, null, 2), colors.yellow);
  }
}); 