const request = require('supertest');
const fs = require('fs');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Express –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// –í–∞–∂–Ω–æ: –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω—ã–π –≤—ã–∑–æ–≤ server.listen(), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ—Ä—Ç–æ–≤
let app;
try {
  // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ listen –≤ —Ñ–∞–π–ª–µ index.js
  process.env.TEST_MODE = 'true';
  app = require('../index.js');
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
let adminToken;
let patientToken;
let doctorToken;
let testPatientId;
let testDoctorId;
let testServiceId;
let testAppointmentId;

// –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
beforeAll(async () => {
  console.log('üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...');
});

// –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
afterAll(async () => {
  console.log('üèÅ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
});

// –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
describe('üíâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã API —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏', () => {
  
  // 1. –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  test('1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', async () => {
    const response = await request(app)
      .post('/api/auth/login')
      .send({
        email: 'admin@dental.com',
        password: 'admin123'
      });
    
    expect(response.statusCode).toBe(200);
    expect(response.body).toHaveProperty('token');
    expect(response.body.user.role).toBe('admin');
    
    adminToken = response.body.token;
    console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  });
  
  // 2. –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
  test('2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞', async () => {
    const response = await request(app)
      .post('/api/auth/register')
      .send({
        email: `patient${Date.now()}@test.com`,
        password: 'password123',
        full_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–∞—Ü–∏–µ–Ω—Ç',
        phone: '+7 (999) 123-45-67',
        role: 'patient'
      });
    
    expect(response.statusCode).toBe(201);
    expect(response.body).toHaveProperty('token');
    expect(response.body.user.role).toBe('patient');
    
    patientToken = response.body.token;
    testPatientId = response.body.user.id;
    console.log('‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
  });
  
  // 3. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–∞—á–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  test('3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', async () => {
    const response = await request(app)
      .post('/api/admin/doctors')
      .set('Authorization', `Bearer ${adminToken}`)
      .send({
        email: `doctor${Date.now()}@test.com`,
        password: 'doctor123',
        full_name: '–¢–µ—Å—Ç–æ–≤—ã–π –í—Ä–∞—á',
        specialization: '–¢–µ—Ä–∞–ø–µ–≤—Ç',
        experience: 5,
        description: '–û–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'
      });
    
    expect(response.statusCode).toBe(201);
    expect(response.body).toHaveProperty('id');
    
    testDoctorId = response.body.id;
    console.log('‚úÖ –í—Ä–∞—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
  });
  
  // 4. –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Ä–∞—á–∞
  test('4. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–∞—á–∞', async () => {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º email –≤—Ä–∞—á–∞
    const doctorResponse = await request(app)
      .get(`/api/admin/doctors/${testDoctorId}`)
      .set('Authorization', `Bearer ${adminToken}`);
    
    expect(doctorResponse.statusCode).toBe(200);
    
    const doctorEmail = doctorResponse.body.email;
    
    // –¢–µ–ø–µ—Ä—å –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ —ç—Ç–æ—Ç –≤—Ä–∞—á
    const response = await request(app)
      .post('/api/auth/login')
      .send({
        email: doctorEmail,
        password: 'doctor123'
      });
    
    expect(response.statusCode).toBe(200);
    expect(response.body).toHaveProperty('token');
    expect(response.body.user.role).toBe('doctor');
    
    doctorToken = response.body.token;
    console.log('‚úÖ –í—Ä–∞—á —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  });
  
  // 5. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥
  test('5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥', async () => {
    const response = await request(app)
      .get('/api/services');
    
    expect(response.statusCode).toBe(200);
    expect(Array.isArray(response.body)).toBe(true);
    expect(response.body.length).toBeGreaterThan(0);
    
    testServiceId = response.body[0].id;
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω');
  });
  
  // 6. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π
  test('6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π', async () => {
    const response = await request(app)
      .get('/api/doctors');
    
    expect(response.statusCode).toBe(200);
    expect(Array.isArray(response.body)).toBe(true);
    expect(response.body.length).toBeGreaterThan(0);
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω');
  });
  
  // 7. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
  test('7. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º', async () => {
    // –£—Å—Ç–∞–Ω–æ–≤–∏–º –¥–∞—Ç—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const appointmentDate = tomorrow.toISOString().split('T')[0];
    
    const response = await request(app)
      .post('/api/appointments')
      .set('Authorization', `Bearer ${patientToken}`)
      .send({
        doctor_id: testDoctorId,
        service_id: testServiceId,
        appointment_date: appointmentDate,
        appointment_time: '14:00',
        notes: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º'
      });
    
    expect(response.statusCode).toBe(201);
    expect(response.body).toHaveProperty('id');
    
    testAppointmentId = response.body.id;
    console.log('‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
  });
  
  // 8. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞
  test('8. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞', async () => {
    const response = await request(app)
      .get('/api/patient/appointments')
      .set('Authorization', `Bearer ${patientToken}`);
    
    expect(response.statusCode).toBe(200);
    expect(Array.isArray(response.body)).toBe(true);
    expect(response.body.length).toBeGreaterThan(0);
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω');
  });
  
  // 9. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤—Ä–∞—á–∞
  test('9. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤—Ä–∞—á–∞', async () => {
    const response = await request(app)
      .get('/api/doctor/appointments')
      .set('Authorization', `Bearer ${doctorToken}`);
    
    expect(response.statusCode).toBe(200);
    expect(Array.isArray(response.body)).toBe(true);
    expect(response.body.length).toBeGreaterThan(0);
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –≤—Ä–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω');
  });
  
  // 10. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–∞—á–æ–º
  test('10. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ –≤—Ä–∞—á–æ–º', async () => {
    const response = await request(app)
      .put(`/api/doctor/appointments/${testAppointmentId}`)
      .set('Authorization', `Bearer ${doctorToken}`)
      .send({
        status: 'confirmed'
      });
    
    expect(response.statusCode).toBe(200);
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤—Ä–∞—á–æ–º');
  });
  
  // 11. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  test('11. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', async () => {
    const response = await request(app)
      .post('/api/admin/services')
      .set('Authorization', `Bearer ${adminToken}`)
      .send({
        name: '–¢–µ—Å—Ç–æ–≤–∞—è —É—Å–ª—É–≥–∞',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —É—Å–ª—É–≥–∏',
        price: 2000,
        duration: 45
      });
    
    expect(response.statusCode).toBe(201);
    expect(response.body).toHaveProperty('id');
    console.log('‚úÖ –ù–æ–≤–∞—è —É—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
  });
  
  // 12. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  test('12. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', async () => {
    const response = await request(app)
      .get('/api/admin/appointments')
      .set('Authorization', `Bearer ${adminToken}`);
    
    expect(response.statusCode).toBe(200);
    expect(Array.isArray(response.body)).toBe(true);
    expect(response.body.length).toBeGreaterThan(0);
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
  });
  
  // 13. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  test('13. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', async () => {
    const response = await request(app)
      .put(`/api/admin/doctors/${testDoctorId}`)
      .set('Authorization', `Bearer ${adminToken}`)
      .send({
        specialization: '–û—Ä—Ç–æ–¥–æ–Ω—Ç',
        experience: 7,
        description: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–∞—á–∞'
      });
    
    expect(response.statusCode).toBe(200);
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
  });
  
  // 14. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
  test('14. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞', async () => {
    const response = await request(app)
      .get('/api/patient/profile')
      .set('Authorization', `Bearer ${patientToken}`);
    
    expect(response.statusCode).toBe(200);
    expect(response.body).toHaveProperty('email');
    expect(response.body).toHaveProperty('full_name');
    expect(response.body.role).toBe('patient');
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã');
  });
  
  // 15. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  test('15. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', async () => {
    const response = await request(app)
      .put(`/api/admin/appointments/${testAppointmentId}`)
      .set('Authorization', `Bearer ${adminToken}`)
      .send({
        status: 'completed'
      });
    
    expect(response.statusCode).toBe(200);
    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
  });
  
  // 16. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏
  test('16. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–µ', async () => {
    const response = await request(app)
      .get(`/api/services/${testServiceId}`);
    
    expect(response.statusCode).toBe(200);
    expect(response.body).toHaveProperty('id', testServiceId);
    expect(response.body).toHaveProperty('name');
    expect(response.body).toHaveProperty('price');
    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞');
  });
  
  // 17. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞—á–∞
  test('17. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≤—Ä–∞—á–µ', async () => {
    const response = await request(app)
      .get(`/api/doctors/${testDoctorId}`);
    
    expect(response.statusCode).toBe(200);
    expect(response.body).toHaveProperty('id', testDoctorId);
    expect(response.body).toHaveProperty('full_name');
    expect(response.body).toHaveProperty('specialization');
    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≤—Ä–∞—á–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞');
  });
  
  // 18. –¢–µ—Å—Ç –ø–æ–ø—ã—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  test('18. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º', async () => {
    const response = await request(app)
      .get('/api/admin/doctors')
      .set('Authorization', `Bearer ${patientToken}`);
    
    expect(response.statusCode).toBe(403);
    console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω –æ–±—ã—á–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
  });
  
  // 19. –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–º
  test('19. –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–º', async () => {
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    // –£—Å—Ç–∞–Ω–æ–≤–∏–º –¥–∞—Ç—É –Ω–∞ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
    const dayAfterTomorrow = new Date();
    dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 2);
    const appointmentDate = dayAfterTomorrow.toISOString().split('T')[0];
    
    const createResponse = await request(app)
      .post('/api/appointments')
      .set('Authorization', `Bearer ${patientToken}`)
      .send({
        doctor_id: testDoctorId,
        service_id: testServiceId,
        appointment_date: appointmentDate,
        appointment_time: '16:00',
        notes: '–ó–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã'
      });
    
    expect(createResponse.statusCode).toBe(201);
    
    // –¢–µ–ø–µ—Ä—å –æ—Ç–º–µ–Ω—è–µ–º —ç—Ç—É –∑–∞–ø–∏—Å—å
    const cancelResponse = await request(app)
      .put(`/api/patient/appointments/${createResponse.body.id}`)
      .set('Authorization', `Bearer ${patientToken}`)
      .send({
        status: 'canceled'
      });
    
    expect(cancelResponse.statusCode).toBe(200);
    console.log('‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–º');
  });
  
  // 20. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏
  test('20. –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏', async () => {
    // –£—Å—Ç–∞–Ω–æ–≤–∏–º –¥–∞—Ç—É –Ω–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä–µ–¥
    const twoWeeksLater = new Date();
    twoWeeksLater.setDate(twoWeeksLater.getDate() + 14);
    const searchDate = twoWeeksLater.toISOString().split('T')[0];
    
    const response = await request(app)
      .get(`/api/appointments/available?doctor_id=${testDoctorId}&date=${searchDate}`);
    
    expect(response.statusCode).toBe(200);
    expect(Array.isArray(response.body)).toBe(true);
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω');
  });
}); 