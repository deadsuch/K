/**
 * –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç 5 –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ 
 * —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞.
 * 
 * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: node basic-tests.js
 */

const axios = require('axios');
const assert = require('assert');

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const BASE_URL = process.env.API_URL || 'http://localhost:5000';

// –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–æ–º
function log(message, color = colors.reset) {
  console.log(color + message + colors.reset);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
function formatTestResult(testName, passed, error = null) {
  if (passed) {
    log(`‚úÖ ${testName}: –£—Å–ø–µ—à–Ω–æ`, colors.green);
  } else {
    log(`‚ùå ${testName}: –û—à–∏–±–∫–∞`, colors.red);
    if (error) log(`   ${error.message || error}`, colors.red);
  }
}

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
async function runTest(testName, testFunction) {
  try {
    await testFunction();
    formatTestResult(testName, true);
    return true;
  } catch (error) {
    formatTestResult(testName, false, error);
    return false;
  }
}

// –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –∏ –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
const tests = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
async function runAllTests() {
  log('\n' + colors.bright + colors.cyan + '='.repeat(60), colors.cyan);
  log('–ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ –°–ï–†–í–ï–†–ê –°–¢–û–ú–ê–¢–û–õ–û–ì–ò–ß–ï–°–ö–û–ô –ö–õ–ò–ù–ò–ö–ò', colors.cyan);
  log('='.repeat(60) + '\n', colors.cyan);

  let passedCount = 0;
  let failedCount = 0;

  for (const test of tests) {
    const result = await runTest(test.name, test.fn);
    if (result) {
      passedCount++;
    } else {
      failedCount++;
    }
  }

  // –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  log('\n' + '='.repeat(60), colors.cyan);
  log(`–ò–¢–û–ì–û: ${passedCount} –∏–∑ ${tests.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`, 
      passedCount === tests.length ? colors.green : colors.yellow);
  
  if (passedCount === tests.length) {
    log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! üéâ\n', colors.green + colors.bright);
  } else {
    log(`\n‚ö†Ô∏è ${failedCount} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞.\n`, colors.yellow + colors.bright);
  }
}

// ----- –¢–ï–°–¢–´ -----

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
tests.push({
  name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞',
  fn: async () => {
    const response = await axios.get(`${BASE_URL}/api/health`);
    assert.strictEqual(response.status, 200);
    assert.strictEqual(response.data.status, 'ok');
  }
});

// –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥
tests.push({
  name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥',
  fn: async () => {
    const response = await axios.get(`${BASE_URL}/api/services`);
    assert.strictEqual(response.status, 200);
    assert.ok(Array.isArray(response.data));
    assert.ok(response.data.length > 0);
  }
});

// –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π
tests.push({
  name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π',
  fn: async () => {
    const response = await axios.get(`${BASE_URL}/api/doctors`);
    assert.strictEqual(response.status, 200);
    assert.ok(Array.isArray(response.data));
  }
});

// –¢–µ—Å—Ç 4: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
tests.push({
  name: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
  fn: async () => {
    const response = await axios.post(`${BASE_URL}/api/login`, {
      email: 'admin@dental.com',
      password: 'admin123'
    });
    
    assert.strictEqual(response.status, 200);
    assert.ok(response.data.token);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
    global.adminToken = response.data.token;
  }
});

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É
tests.push({
  name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É',
  fn: async () => {
    const response = await axios.get(
      `${BASE_URL}/api/admin/services`,
      { headers: { Authorization: `Bearer ${global.adminToken}` } }
    );
    
    assert.strictEqual(response.status, 200);
    assert.ok(Array.isArray(response.data));
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
runAllTests().catch(error => {
  log('\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', colors.red);
  log(error.message, colors.red);
  
  if (error.response) {
    log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', colors.yellow);
    log(JSON.stringify(error.response.data, null, 2), colors.yellow);
  }
}); 